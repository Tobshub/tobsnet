// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(auto()) @map("_id") @db.ObjectId
  username         String
  email            String         @unique
  password         String
  bio              String
  profileImage     Bytes?
  posts            Post[]
  likedPosts       Post[]         @relation(name: "LikedPosts", fields: [likedPostsIds], references: [id])
  likedPostsIds    String[]       @db.ObjectId
  likedComments    Comment[]      @relation(name: "LikedComments", fields: [likedCommentsIds], references: [id])
  likedCommentsIds String[]       @db.ObjectId
  comments         Comment[]
  notifications    Notification[]
  followers        User[]         @relation("Following", fields: [followersIds], references: [id])
  followersIds     String[]       @db.ObjectId
  following        User[]         @relation("Following", fields: [followingIds], references: [id])
  followingIds     String[]       @db.ObjectId
}

model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  slug          String    @unique
  content       String
  createdAt     DateTime  @default(now()) @map("createdAt") @db.Timestamp
  likes         Int       @default(0)
  likesUsers    User[]    @relation(name: "LikedPosts", fields: [likesUsersIds], references: [id])
  likesUsersIds String[]  @db.ObjectId
  comments      Comment[]
  commentCount  Int       @default(0)
}

type Notification {
  content   String
  createdAt DateTime         @default(now()) @db.Timestamp
  type      NotificationType
}

enum NotificationType {
  FOLLOW
  POST_LIKE
  COMMENT
  REPLY
}

model Comment {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime  @default(now()) @db.Timestamp
  user          User      @relation(fields: [userId], references: [id])
  userId        String    @db.ObjectId
  post          Post      @relation(fields: [postId], references: [id])
  postId        String    @db.ObjectId
  content       String
  likes         Int       @default(0)
  replyCount    Int       @default(0)
  parentId      String?   @db.ObjectId
  parent        Comment?  @relation("Replies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Comment[] @relation("Replies")
  likesUsers    User[]    @relation(name: "LikedComments", fields: [likesUsersIds], references: [id])
  likesUsersIds String[]  @db.ObjectId
}
